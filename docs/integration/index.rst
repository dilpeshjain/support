Deployment and Integration
==========================

Solution Architecture
---------------------
The Falkonry Pattern Recognition System is a key component in many different types of operations management and monitoring solutions. The figure below shows the the high-level structure of a typical solution. The Falkonry System can be dropped into an existing operations management solution or it can be designed in at the start. 

.. image:: ../images/operations_mgmt_solution.png

An operations management solution contains the following elements:

  - **Data ingestion**: Extraction of data from source systems (PLCs, Servers, Sensors,...)
  - **Data storage/query/search**: After ingestion some portion of the data is stored and made available for application use. The types of data storage components used includes:
    
    - Process historians (e.g. OSISoft PI, Aspentech InfoPlus.21, GE Historian or Wonderware Historian)
    - Time series oriented Data platforms (e.g. Splunk, ELK, Sumo Logic)
    - SQL databases 
    - Other time series or big data oriented DBs (e.g. InfluxDB, Cassandra, HDFS)
  - **Operations application(s)**: Operations management applications can have many purposes, e.g. safety, downtime avoidance, preventative maintenance, yield and efficiency optimization, security management. Applications could involve simple rule-based alerts and dashboards, or they could involve more complicated logic and integration with other enterprise systems.
  - **Falkonry Integration Agent**: This Agent typically is deployed near the data storage component of the solution, and is responsible for controlling interactions with the Falkonry Server. (see Falkonry Integration Agents).
  - **Falkonry Server**: In a typical configuration (see Advanced Falkonry Configurations), a single Falkonry Server is responsible for building pattern recogintion models and applying those models to live streams of data. The Falkonry Server is delivered as self-contained SaaS application that can be easily deployed on premise or in cloud environments from providers like Microsoft Azure, Oracle Cloud, Google Compute Engine, or Amazon Web Services (see Falkonry Server environments).

Falkonry Integration Agents
---------------------------
A Falkonry Integration Agent bridges interactions between the time series data storage component and the Falkonry Server. There are four primary interactions that the agent needs to support:

  - **Create Datastream**: Create a Falkonry Datastream to produce a set of Assessments for a given set of Signals and Entities.
  - **Send History Window**: Data communicated to Falkonry to enable learning of pattern recognition models.
  - **Send Streaming Data**: This amounts to forwarding newly received data to Falkonry for Assessment.
  - **Get Assessment Results for History Window**: In many cases there is a desire to store the Assessment results generated by Falkonry for the provided History Window (this is often referred to as backfill).
  - **Get Live Assessment Results**: Listens for live Assessment results produced by Falkonry.

There is a growing list of pre-built Integration Agents for data storage products like OSISoft PI and Splunk, and there are several downloadable Agent Dev Kits that make construction of Agents for any storage system relatively easy.

Pre-Built Integration Agents
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Pre-built Agents are currently available for:

  - OSISoft PI
  - Splunk

Agent Dev Kits
~~~~~~~~~~~~~~
Falkonry provides Agent Dev Kits that facilitate rapid construction of Agents for any time series data storage system. These kits are provided as free and open-source software (FOSS) in a variety of programming languages. Currently available Dev Kits include:

  - C# Falkonry Agent Dev Kit
  - Java Falkonry Agent Dev Kit
  - Python Falkonry Agent Dev Kit
  - Javascript Falkonry Agent Dev Kit

Falkonry Server Environments
----------------------------
A Falkonry Server instance runs in a clustered compute environment. This enviroment can be located on premise or in the cloud. In all cases, Falkonry monitors and maintains the health of the instance and manages software upgrades. The Falkonry Server instance only requires outbound internet connectivity. There are two types of compute environments preferred for deployment:

  - VPC deployment in supported cloud vendor environments (in customer managed account): Oracle Bare Metal Cloud, Microsoft Azure, Google Compute Engine
  - Pre-configured appliance delivered to customer site: Falkonry is partnered with hardware vendors to provide Falkonry-in-box. Customer provides power & network connectivity.

A Falkonry Server instance can be installed on customer provided hardware or virtualized environments in certain circumstance. Please contact us if you believe you will need to deploy in this manner <info@falkonry.com>.

Advanced Falkonry System Configurations
--------------------------------
As mentioned previously, the Falkonry System is typically deployed via a single Falkonry Server that is responsible for learning models and applying those models to recognize patterns in live streaming data. There are some circumstances where it is advantageous to divide learning and live recognition responsibilities across a set of Falkonry Server instances. In such a configuration, models can be learned in one server and then be delivered to other servers for purposes of live recognition.

.. image:: images/split_learn_recog.png

Drivers for a distributed configuration include:

  - Optimization of resource usage: Learning activities are infrequent but consume large amounts of CPU and RAM. Live recognition requires a steady but smaller allocation of resources.
  - Performance enhancement: Separating responsibilties allows the real-time recognition capabilities to be moved out to the edge to reduce latency.
  - Isolation and control: In some enviroments, real-time flow components are highly isolated from user interaction and more strictly controlled in their behavior. Use of a Recognize-only Falkonry Server near the data source makes it easy to support these types of requirements.
